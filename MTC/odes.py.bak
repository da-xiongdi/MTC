import os
import time

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import scipy.integrate
from CoolProp.CoolProp import PropsSI
from scipy.linalg import solve

R = 8.314


def ode(T1, T2, c1, c2, dl):
    """
    ode for the concentration distribution along the channel
    the origin is located at the outside
    :param T1: inside temperature
    :param T2: outside temperature
    :param c1: inside concentration
    :param c2: outside concentration
    :param dl: length of the channel
    :return: concentration and its slop
    """

    # function
    def dydx(x, y):
        a = (T1 - T2) / dl
        b = T2
        dy0 = y[1]
        dy1 = a / (a * x + b) * y[1] - y[1] ** 2 / (1 - y[0])
        return np.vstack((dy0, dy1))

    def bound(ya, yb):
        return np.array([ya[0] - c2, yb[0] - c1])

    xa, xb = 0, dl
    xini = np.linspace(xa, xb, 11)
    # print(xini)
    yini = np.zeros((2, xini.size))
    res = scipy.integrate.solve_bvp(dydx, bound, xini, yini, tol=1e-10)
    xsol = np.linspace(xa, xb, 5000)
    ysol = res.sol(xsol)
    return ysol


def oder(T1, T2, c1, c2, r1, r2):
    """
    ode for the concentration distribution along the channel
    the origin is located at the outside
    :param T1: inside temperature
    :param T2: outside temperature
    :param c1: inside concentration
    :param c2: outside concentration
    :param r1: outer radius
    :param r2: inter radius
    :return: concentration and its slop
    """

    # function
    def dydx(x, y):
        kT = (T1 - T2) / (r1 - r2)
        bT = (T2 * r1 - r2 * T1) / (r1 - r2)
        dy0 = y[1]
        dy1 = kT / (kT * x + bT) * y[1] - y[1] / x - y[1] ** 2 / (1 - y[0])
        return np.vstack((dy0, dy1))

    def bound(ya, yb):
        return np.array([ya[0] - c2, yb[0] - c1])

    xa, xb = r2, r1
    xini = np.linspace(xa, xb, 11)
    # print(xini)
    yini = np.zeros((2, xini.size))
    res = scipy.integrate.solve_bvp(dydx, bound, xini, yini)
    xsol = np.linspace(xa, xb, 400)
    ysol = res.sol(xsol)
    return ysol


def odes(inner_cond, outer_cond, P, properties):
    """
    ode for the concentration distribution along the channel
    radial distribution
    the origin is located at the center of the circle
    :param inner_cond: temperature, molar fraction, and radius at inside;list
    :param outer_cond: temperature, molar fraction, and radius at outside; list
    :param P: pressure of mixture
    :param properties: heat capacity, diffusion coefficient, thermal conductivity of mixture; list
    :return: concentration and its slop
    """
    [cp, D, k] = properties
    [T1, c1, r1] = inner_cond
    [T2, c2, r2] = outer_cond

    # function

    def model(z, y):
        x, T = y[0], y[2]
        dxdz, dTdz = y[1], y[3]
        d2x_dz2 = -dxdz / z + dTdz / T * dxdz - dxdz ** 2 / (1 - x)
        d2T_dz2 = -dTdz / z - cp * P * D / k / R / (1 - x) * dxdz / T * dTdz
        return np.vstack((dxdz, d2x_dz2, dTdz, d2T_dz2))

    def bound(ya, yb):
        return np.array([ya[0] - c1, ya[2] - T1, yb[0] - c2, yb[2] - T2])

    xa, xb = r1, r2
    xini = np.linspace(xa, xb, 11)
    yini = np.zeros((4, xini.size))
    yini[0] = np.linspace(c1, c2, xini.size)
    yini[1] = (c1 - c2) / (r1 - r2)
    yini[2] = np.linspace(T1, T2, xini.size)
    yini[3] = (T1 - T2) / (r1 - r2)
    res = scipy.integrate.solve_bvp(model, bound, xini, yini, tol=1e-10, max_nodes=1000)
    xsol = np.linspace(xa, xb, 500)
    ysol = res.sol(xsol)
    return ysol


def ode2(inner_cond, outer_cond, P, properties, initial):
    """
    ode for the concentration distribution along the channel
    radial distribution
    the origin is located at the center of the circle
    :param inner_cond: temperature, molar fraction, and radius at inside;list
    :param outer_cond: temperature, molar fraction, and radius at outside; list
    :param P: pressure of mixture
    :param properties: heat capacity, diffusion coefficient, thermal conductivity of mixture; list
    :return: concentration and its slop
    """
    [cp_c, cp_d, D, k] = properties
    [T1, r1, x_c1, x_d1] = inner_cond
    [T2, r2, x_c2, x_d2] = outer_cond

    # function

    def model(z, y):
        [xc, xd, Nd, T, dTdz] = y
        # xc[xc < x_c1] = x_c1
        # xc[xc > x_c2] = x_c2
        # xd[xd < x_d1] = x_d1
        # xd[xd > x_d2] = x_d2
        # xd = abs(xd)
        # Nc = -abs(Nc)
        # Nd = -abs(Nd)
        # dTdz = abs(dTdz)
        # dxc_dz = (-Nc * ((1 - xc - xd) / 4.5e-5 + xd / 2.6e-5) + Nd * xc / 2.6e-5) / (P / R / T)
        # dxc_dz[dxc_dz < 0] = 1e-5
        Nc = 2 * Nd
        dxc_dz = (-Nc * (1 - xc) + Nd * xc) / (P / R / T)
        # dxd_dz = (-Nd * ((1 - xc - xd) / 1.4e-5 + xc / 2.6e-5) + Nc * xd / 2.6e-5) / (P / R / T)
        dxd_dz = (-Nd * (1 - xd) + Nc * xd) / (P / R / T)
        # dxd_dz[dxd_dz < 0] = 1e-5
        dNc_dz = -Nc / z
        dNd_dz = -Nd / z
        d2T_dz2 = -dTdz / z + dTdz * cp_c * Nc / k + dTdz * cp_d * Nd / k
        return np.vstack((dxc_dz, dxd_dz, dNd_dz, dTdz, d2T_dz2))

    def bound(ya, yb):
        return np.array([ya[0] - x_c1, ya[1] - x_d1, ya[3] - T1,
                         yb[0] - x_c2, yb[3] - T2])

    xa, xb = r1, r2
    xini = np.linspace(xa, xb, 500)
    yini = np.zeros((5, xini.size))
    yini[0] = np.linspace(x_c1, x_c2, xini.size)  # initial[0][0] #
    yini[1] = np.linspace(x_d1, x_d2, xini.size)  # initial[0][1]  #
    # yini[2] = initial[1][0]  # e-4
    yini[2] = -0.01  # initial[1]  # [1]  # e-4
    yini[3] = np.linspace(T1, T2, xini.size)
    yini[4] = (T1 - T2) / (r1 - r2)
    res = scipy.integrate.solve_bvp(model, bound, xini, yini, tol=1e-10, max_nodes=50000)
    xsol = np.linspace(xa, xb, 500)
    ysol = res.sol(xsol)
    return ysol


def ode4(inner_cond, outer_cond, P, properties):
    """
    ode for the concentration distribution along the channel
    radial distribution
    the origin is located at the center of the circle
    :param inner_cond: temperature, molar fraction, and radius at inside;list
    :param outer_cond: temperature, molar fraction, and radius at outside; list
    :param P: pressure of mixture
    :param properties: heat capacity, diffusion coefficient, thermal conductivity of mixture; list
    :return: concentration and its slop
    """
    [cp_c, cp_d, D, k] = properties
    [T1, r1, x_c1, x_d1] = inner_cond
    [T2, r2, x_c2, x_d2] = outer_cond

    # function

    def model(z, y):
        [xc, xd, Nd, T, dTdz] = y
        Nc = 0.73 * Nd
        dxc_dz = (-Nc * (1 - xc) + Nd * xc) / (P / R / T)/D
        dxd_dz = (-Nd * (1 - xd) + Nc * xd) / (P / R / T)/D
        dNc_dz = -Nc / z
        dNd_dz = -Nd / z
        d2T_dz2 = -dTdz / z + dTdz * cp_c * Nc / k + dTdz * cp_d * Nd / k
        return np.vstack((dxc_dz, dxd_dz, dNd_dz, dTdz, d2T_dz2))

    def bound(ya, yb):
        return np.array([ya[0] - x_c1, ya[1] - x_d1, ya[3] - T1,
                         yb[0] - x_c2, yb[3] - T2])

    xa, xb = r1, r2
    xini = np.linspace(xa, xb, 500)
    yini = np.zeros((5, xini.size))
    yini[0] = np.linspace(x_c1, x_c2, xini.size)  # initial[0][0] #
    yini[1] = np.linspace(x_d1, x_d2, xini.size)  # initial[0][1]  #
    # yini[2] = initial[1][0]  # e-4
    yini[2] = -0.01  # initial[1]  # [1]  # e-4
    yini[3] = np.linspace(T1, T2, xini.size)
    yini[4] = (T1 - T2) / (r1 - r2)
    res = scipy.integrate.solve_bvp(model, bound, xini, yini, tol=1e-10, max_nodes=50000)
    xsol = np.linspace(xa, xb, 500)
    ysol = res.sol(xsol)
    return ysol


def func(boundary, d):
    n = int((boundary[1][0] - boundary[0][0]) / d) + 1  # number of nodes
    x = np.linspace(boundary[0][0], boundary[1][0], n)
    dydx, dy2d2x = np.zeros(n), np.zeros(n)
    a = np.zeros((n, n))
    b = np.zeros(n)
    for i in range(n):
        if i == 0:
            a[i, i] = 1
            b[i] = boundary[0][1]
        elif i == n - 1:
            a[i, i] = 1
            b[i] = boundary[1][1]
        else:
            a[i, i - 1:i + 2] = np.array([1, -2, 1]) / d ** 2
            a[i, i] += -4
            b[i] = 3 * (boundary[0][0] + i * d)

    y = solve(a, b)
    for i in range(n):
        if i == 0:
            dydx[i] = (y[i + 1] - y[i]) / d
            dy2d2x[i] = (y[i] + y[i + 2] - 2 * y[i + 1]) / d ** 2
        elif i == n - 1:
            dydx[i] = (y[i] - y[i - 1]) / d
            dy2d2x[i] = (y[i] + y[i - 2] - 2 * y[i - 1]) / d ** 2
        else:
            dydx[i] = (y[i + 1] - y[i - 1]) / 2 / d
            dy2d2x[i] = (y[i - 1] + y[i + 1] - 2 * y[i]) / d ** 2
    result = np.vstack((x, y, dydx, dy2d2x))
    return result


# condition = [[0, 0], [1, 1]]
# print(func(condition, 0.1))

def RK4(fun, t_span, x0, dt=0.02):
    [t0, t1] = t_span
    n = int((t1 - t0) / dt) + 1
    t = np.linspace(t0, t1, n)
    x = np.zeros((n, len(x0)))
    x[0] = x0
    dxdt, d2xdt2 = np.zeros((n, len(x0))), np.zeros((n, len(x0)))

    k = np.zeros((4, len(x0)))
    a = np.array([[0] * 4, [0.5, 0, 0, 0], [0, 0.5, 0, 0], [0, 0, 1, 0]])
    c = np.array([0, 0.5, 0.5, 1])
    b = np.array([1 / 6, 1 / 3, 1 / 3, 1 / 6])
    for i in range(n):
        k[0] = x[i]
        t_k = np.array([t[i]] * 4) + c * dt
        k[1] = x[i] + dt * fun(t_k[0], k[0]) * a[1, 0]
        k[2] = x[i] + dt * fun(t_k[0] * dt, k[0]) * a[2, 0] + dt * fun(t_k[1], k[1]) * a[2, 1]
        k[3] = x[i] + dt * fun(t_k[0] * dt, k[0]) * a[3, 0] \
               + dt * fun(t_k[1], k[1]) * a[3, 1] + dt * fun(t_k[2], k[1]) * a[3, 2]
        fs = np.array([fun(t_k[o], k[o]) for o in range(4)])
        dxdt[i] = fun(t_k[0], k[0])
        if i < n - 1: x[i + 1] = x[i] + np.matmul(b.reshape((1, 4)), fs) * dt
    return x, dxdt


def RK41(fun):
    t0, t1 = 0, 20
    n = 1000
    t = np.linspace(t0, t1, n)
    h = (t1 - t0) / n
    x = np.ones((n, 3)) * 5
    k = np.zeros((4, 3))
    c = np.array([0, 0.5, 0.5, 1])
    for i in range(n - 1):
        t_k = np.array([t[i]] * 4) + c * h
        k[0] = fun(t_k[0], x[i])
        k[1] = fun(t_k[1], k[0] * h / 2 + x[i])
        k[2] = fun(t_k[2], k[1] * h / 2 + x[i])
        k[3] = fun(t_k[3], k[2] * h + x[i])
        # print(k)
        x[i + 1] = x[i] + (k[0] + k[1] * 2 + k[2] * 2 + k[3]) * h / 6
    return x


def lorenz(t, y):
    return np.array([-10 * y[0] + 10 * y[1], 28 * y[0] - y[1] - y[0] * y[2], y[0] * y[1] - 8 * y[2] / 3])


def f74(t, y):
    dydt = y[1]
    d2ydt2 = 4 * y[0] + 3 * t ** 2
    return np.array([dydt, d2ydt2])


def ode3(inner_cond, outer_cond, P, properties):
    """
    ode for the concentration distribution along the channel
    radial distribution
    the origin is located at the center of the circle
    :param inner_cond: temperature, molar fraction, and radius at inside;list
    :param outer_cond: temperature, molar fraction, and radius at outside; list
    :param P: pressure of mixture
    :param properties: heat capacity, diffusion coefficient, thermal conductivity of mixture; list
    :return: concentration and its slop
    """
    [cp, D, k] = properties
    [T1, c1, r1] = inner_cond
    [T2, c2, r2] = outer_cond

    # function

    def model(z, y):
        [x, Na, T, dT_dz] = y
        dx_dz = -Na * (1 - x) / (P / R / T) / D
        dNa_dz = -Na / z
        d2T_dz2 = -dT_dz / z + dT_dz * Na * cp / k
        return np.vstack((dx_dz, dNa_dz, dT_dz, d2T_dz2))

    def bound(ya, yb):
        return np.array([ya[0] - c1, ya[2] - T1, yb[0] - c2, yb[2] - T2])

    xa, xb = r1, r2
    xini = np.linspace(xa, xb, 11)
    yini = np.zeros((4, xini.size))
    yini[0] = np.linspace(c1, c2, xini.size)
    yini[1] = -0.5
    yini[2] = np.linspace(T1, T2, xini.size)
    yini[3] = (T1 - T2) / (r1 - r2)
    res = scipy.integrate.solve_bvp(model, bound, xini, yini, tol=1e-10, max_nodes=1000)
    xsol = np.linspace(xa, xb, 500)
    ysol = res.sol(xsol)
    return ysol


def ifm(inner_cond, outer_cond, P, gas_property, node=500):
    [cp_c, cp_d, D, k] = gas_property
    [T1, r1, x_c1, x_d1] = inner_cond
    [T2, r2, x_c2, x_d2] = outer_cond

    delta = (r2 - r1) / (node - 1)
    r_mesh = np.linspace(r1, r2, node)
    # x N T
    y = np.ones((node, 3))
    coe_2nd = triMatrix(1, -2, 1, node)
    coe_1st = triMatrix(-1, 0, 1, node)
    f1 = np.matmul(coe_2nd, y[:, 2]) / delta ** 2 + np.matmul(coe_1st, y[:, 2]) / r_mesh / 2 / delta - \
         np.matmul(coe_1st, y[:, 2]) * y[:, 1] * cp_c / k / 2 / delta
    f2 = np.matmul(coe_1st, y[:, 0]) / 2 / delta + y[:, 1] * (1 - y[:, 0]) / (P / R / y[:, 2]) / D
    f3 = np.matmul(coe_1st, y[:, 1]) / 2 / delta + y[:, 1] / r_mesh
    f1[0] = y[0, 2] - T1
    f1[-1] = y[-1, 2] - T2
    f2[0] = y[0, 0] - x_c1
    f2[-1] = y[-1, 0] - x_c2
    f3[0] = (y[1, 1] - y[0, 1]) / delta + y[0, 1] / r_mesh[0]
    f3[-1] = (y[-1, 1] - y[-2, 1]) / delta + y[-1, 1] / r_mesh[-1]
    return np.vstack((f1, f2, f3))


def func2(inner_cond, outer_cond, P, gas_property, node=500):
    [cp_c, cp_d, D, k] = gas_property
    [T1, r1, x_c1, x_d1] = inner_cond
    [T2, r2, x_c2, x_d2] = outer_cond

    # x N T
    def func3(y):
        delta = (r2 - r1) / (node - 1)
        r_mesh = np.linspace(r1, r2, node)
        y = np.ones(3 * node)
        coe_2nd = triMatrix(1, -2, 1, node)
        coe_1st = triMatrix(-1, 0, 1, node)
        f1 = np.matmul(coe_2nd, y[2 * node:]) / delta ** 2 + np.matmul(coe_1st, y[2 * node:]) / r_mesh / 2 / delta - \
             np.matmul(coe_1st, y[2 * node:]) * y[node:2 * node] * cp_c / k / 2 / delta
        f2 = np.matmul(coe_1st, y[:node]) / 2 / delta + y[node:2 * node] * (1 - y[:node]) / (P / R / y[2 * node:]) / D
        f3 = np.matmul(coe_1st, y[node:2 * node]) / 2 / delta + y[node:2 * node] / r_mesh
        f1[0] = y[2 * node] - T1
        f1[-1] = y[-1] - T2
        f2[0] = y[0] - x_c1
        f2[-1] = y[node - 1] - x_c2
        f3[0] = (y[node + 1] - y[node]) / delta + y[0] / r_mesh[0]
        f3[-1] = (y[2 * node - 1] - y[2 * node - 2]) / delta + y[2 * node - 1] / r_mesh[-1]
        # print(np.hstack((f1, f2, f3)).shape)
        return np.hstack((f1, f2, f3))

    f1_guess = np.linspace(x_c1, x_c2, node)
    f2_guess = np.ones(node) * -0.05
    f3_guess = np.linspace(T1, T2, node)
    f_guess = np.hstack((f1_guess, f2_guess, f3_guess))
    from scipy.optimize import fsolve

    result = fsolve(func3, f_guess, maxfev=50000)
    return result
    # r_mesh = np.linspace(r1, r2, node)
    # print(result)
    # # print(result.shape)
    # plt.plot(r_mesh, result[:node])
    # plt.show()


def triMatrix(down, mid, up, n):
    a = np.diag([mid] * n, k=0)
    b = np.diag([down] * (n - 1), k=-1)
    c = np.diag([up] * (n - 1), k=1)
    d = a + b + c
    d[0, 0], d[-1, -1] = 1, 1
    d[0, 1], d[-1, -2] = 0, 0
    return d


# c = triMatrix(1, -2, 1, 500)
# y = np.ones((500, 3))
# print(y[:, 2])
# # print(c)
#
# print(np.matmul(c, y[:, 2]))
# print(c)
# print(c[:,-2])
# boundary = [[0, 1], [0, 1]]
# tol = 1e-5
# diff = 1e10
# ini = (boundary[1][1] - boundary[1][0]) / (boundary[0][1] - boundary[0][0])
# while diff > tol:
#     ini_bond1 = [boundary[1][0], ini * 10]
#     ini_bond2 = [boundary[1][0], ini * -10]
#     result1 = RK4(f74, boundary[0], ini_bond1, dt=0.02)
#     result2 = RK4(f74, boundary[0], ini_bond2, dt=0.02)
#     cal_bond1, cal_bond2 = result1[0][-1], result2[0][-1]
#     diff = abs((cal_bond1[0] - boundary[1][1]) / boundary[1][1])
#     ini_mod = ini_bond1[1] + (boundary[1][1] - cal_bond1[0]) * \
#               (ini_bond2[1] - ini_bond1[1]) / (cal_bond2[0] - cal_bond1[0])
#     if (cal_bond2):
#         pass

# result1

property_gas = [14.535 * 2, 40e5, 1e-5, 0.2]  # J/mol K, Pa, m2/s, W/m K
# a = [0.016356019, 0.05279398, 0.002325577, 0.004188539, 0.001862962]
# a = [0.209794641,0.66168388,0.07055373,0.037089919,0.016149979]
# ratio = np.ra
# a = [0.228736401, 0.721412134, 0.017601465, 0.01625, 0.01625]
# a = [0.231517024,0.728924778,0.017793448,0.012213,0.00955175] # 4 MPa 2:8
# a = [0.233161247, 0.731504777, 0.02535, 0.00715, 0.011759554]  # 4 MPa 1:1
# b = [0.22523024, 0.690867261, 0.034337596, 0.037564123, 0.00758827]
a = [0.235517113, 0.745172371, 0.018675204, 0.008521366, 0.019310516]  # 5 MPa 1:2 353 K
# # [cp_c, cp_d, D, k] = properties
#
gas_property = [275, 46, 3e-5, 0.3]
#
# [T1, c1, r1] = inner_cond
# [cp, D, k] = properties
diff_H2O = odes([353, 0.00715, 0.025], [483, 0.048, 0.045], P=40e5, properties=[45, 1.8e-5, 0.3])
# diff2_H2O = odes([353, 0.00715, 0.025], [483, 0.048, 0.045], P=40e5, properties=[45, 1.8e-5, 0.3])
diff_CH3OH = odes([353, 0.02535, 0.025], [483, 0.044, 0.045], P=40e5, properties=[275, 5e-5, 0.3])
c_in = 40e5 / R / 483
xsol = np.linspace(0.025, 0.045, 500)
x_H2O = diff_H2O[0]
# x2_H2O = diff2_H2O[2]
# plt.plot(xsol,x1_H2O,xsol,x2_H2O)
# plt.show()

x_CH3OH = diff_CH3OH[0]
na_H2O = -1.8e-5 * diff_H2O[1] * c_in / (1 - diff_H2O[0])
na_CH3OH = -5e-5 * diff_CH3OH[1] * c_in / (1 - diff_CH3OH[0])
# print(na_H2O)
# plt.plot(xsol, na_H2O)
# plt.plot(xsol, na_CH3OH)
# plt.show()
# # print(na_CH3OH)
#
in_cond = [353, 0.025, a[2], a[3]]
out_cond = [483, 0.045, 0.044, 0.048]
result = ode4(in_cond, out_cond, 40e5, gas_property)
xsol = np.linspace(0.025, 0.045, 500)
#
# [xc, xd, Nd, T, dTdz] = y
print(result[0][0], result[0][-1])
print(result[1][0], result[1][-1])
#
fig, ax = plt.subplots(2, 2)

ax[0][0].plot(xsol, result[2]*xsol)
ax[0][1].plot(xsol, result[0])
ax[0][1].plot(xsol, result[1])
ax[0][1].legend(["CH3OH", "H2O"])
ax[1][0].plot(xsol, result[3])
ax[1][1].plot(xsol, result[4])
plt.show()
# plt.plot(xsol, result[3])
# plt.show()
# plt.plot(xsol, T)
# plt.legend(["CH3OH","H2O"])
# plt.title("N")
# plt.show()
# plt.plot(xsol, result[0])
# plt.plot(xsol, result[1])
# plt.legend(["CH3OH","H2O"])
# plt.title("x")
# plt.show()
# plt.plot(xsol, result[4])
# plt.show()
# def func2(inner_cond, outer_cond, P, gas_property, node=500):
#     [cp_c, cp_d, D, k] = gas_property
#     [T1, r1, x_c1, x_d1] = inner_cond
#     [T2, r2, x_c2, x_d2] = outer_cond


# in_cond = [353, 0.025, 0.00715, 0]
# out_cond = [483, 0.045, 0.048, 0.048]
# properties = [45, 0, 1.8e-5, 0.3]
# r = np.linspace(0.025,0.045, 500)
# result = func2(in_cond, out_cond, 40e5, properties)[:500]
# plt.plot(r,result)
# plt.plot(r, x1_H2O)
# plt.show()
